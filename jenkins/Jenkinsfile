pipeline {
    agent {
        label 'DevServer'
    }
    parameters {
        choice choices: ['Development', 'Production'], description: 'User to select his target node selector. ', name: 'envNodeSelector'
    }
    options {
        skipStagesAfterUnstable()
    }
    stages {
        stage('Build') {
            steps {
                script {
                    def file = load 'jenkins/script.groovy'
                    file.helloWorld()
                }
                sh 'mvn -B -DskipTests clean package'
            }
            post {
                success {
                    script {
                        def jarFileName = sh(returnStdout: true, script: "find target -name '*.jar'").trim()
                        stash includes: jarFileName, name: 'MyAppJar'
                    }
                }
            }
        }
        stage('Test') {
            parallel  {
                stage('Test on DevServer') {
                    agent { label "DevServer" }
                    steps {
                        sh 'mvn test'
                    }
                    post {
                        always {
                            junit 'target/surefire-reports/*.xml'
                        }
                    }
                }
                stage('Test on PodServer') {
                    agent  { label "DevServer" }
                    steps {
                        sh 'mvn test'
                    }
                    post {
                        always {
                            junit 'target/surefire-reports/*.xml'
                        }
                    }
                }
            }
        }
        stage('deploy_dev') { 
            when {
                expression { return params.envNodeSelector == 'Development' }
            }
            agent { label 'DevServer' }
            steps {
                script {
                    
                    dir ('/home/ubuntu/deployment') {
                        unstash 'MyAppJar'
                        def jarFileName = sh(returnStdout: true, script: "find /home/ubuntu/deployment -name '*.jar'").trim()
                        sh "jar -xvf ${jarFileName}"
                        sh "java -jar ${jarFileName}" //to execute the jar file
                    }
                    
                }
            }
        }
        stage('deploy_prod') { 
            when {
                expression { return params.envNodeSelector == 'Production' }
            }
            agent { label 'ProdServer' }
            steps {
                timeout(time: 1, unit: 'DAYS') {
                    input message: 'Approve Deployment?', ok: 'Deploy Now'
                
                    script {
                        
                        dir ('/home/ubuntu/deployment') {
                            unstash 'MyAppJar'
                            def jarFileName = sh(returnStdout: true, script: "find /home/ubuntu/deployment -name '*.jar'").trim()
                            sh "jar -xvf ${jarFileName}"
                            sh "java -jar ${jarFileName}" //to execute the jar file
                        }
                        
                    }
                }
            }
        }
    }
}